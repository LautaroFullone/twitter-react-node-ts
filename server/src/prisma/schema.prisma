// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String?   @unique
  password        String
  bio             String?
  email           String   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[]  @db.ObjectId
  hasNotification Boolean?

  posts         Posts[]
  comments      Comments[]
  notifications Notifications[]
}

model Posts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  likedIds  String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comments[]

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}
